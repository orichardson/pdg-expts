
You're in the business of  and taking care of squags. Squags, of course, can be placed in many different configurations, and switching between them takes some effort. Your customers have varried squag configuration tastes, and you yourself are not without opinions: some squag-configs are just easier to deal with than others!

Gronk is the other squag combinator in town, and every time she picks up a new squag from a supplier, she immediately switches its configuration and combines a customers squags in their preferred way. 

For some reason, gronk always seems to get sqags in their easiest-to-use configurations. 

Gronk can only do this because she has twelve arms and eats a complete breakfast.

You're tired. You begin to wonder if there's a better way.



	

	Inconsistency: squags corruptable if you're not careful
	Boundedness : You have fewer arms.
	Modularity: easier for you to take apart your squags b/c lazy evaluation. 
	Three Semantics: 
		- The set of all of the possible squag configurations you could make.  
		-
		-


	Sqagers: observations.
	Customers: decisions you have to make, things you might want to know, etc., 
	Independence: thing customers want. Thing that makes your life easier. 
-------------------------
Issues with analogy:
	Database is clearer. Database also combines and stores information. Reason for probabilities: also want this as an epistemic state. 
=============================
You take notes. 
At any point, your supervisor could ask for your notes. 
