Question: how much of tools do you build around programs, vs building programs round tools? 

In practice, it used to be that we would build tools (e.g., hardware) that worked in a certain way so that speculatively, code could be faster (and also empirically). Take caches for instance.

Once the cache is built, there is an incentive for programmers to tailor their code to the cache, to make use of cache locality. 

Different example: editors. You can design them so that they have lots of different key strokes and commands and utilities (e.g., vim), without thinking about actually how well they'll get used, or interact with one another. 

Somehow this all feels like you locally build up inconsistency and resolve it?? 


---------
Do you write code first, ignoring the machine, and then build the machine to make it go fast?

Or do you write the machine first, and then write your code to go fast on the machine? 

In practice both are bad and you want to use some combination of the two. 
